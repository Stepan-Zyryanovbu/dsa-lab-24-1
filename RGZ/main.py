from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove
from datetime import datetime
import psycopg2
import requests
import asyncio
import logging
import os

API_TOKEN = os.getenv("API_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# Database connection
def get_connection():
    return psycopg2.connect(dbname="rgzrpp", user="postgres", password="5522369", host="localhost")

# FSM States
class RegState(StatesGroup):
    waiting_for_login = State()

class AddOperationState(StatesGroup):
    waiting_for_type = State()
    waiting_for_sum = State()
    waiting_for_date = State()

class OperationViewState(StatesGroup):
    waiting_for_currency = State()
    waiting_for_type_filter = State()

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.\n\n"
        "üìå –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/reg ‚Äì —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/add_operation ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é\n"
        "/operations ‚Äì –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏"
    )


# Registration
@router.message(Command("reg"))
async def register_user(message: Message, state: FSMContext):
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE chat_id = %s", (message.chat.id,))
    if cur.fetchone():
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        cur.close()
        conn.close()
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    await state.set_state(RegState.waiting_for_login)
    cur.close()
    conn.close()

@router.message(RegState.waiting_for_login)
async def process_login(message: Message, state: FSMContext):
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("INSERT INTO users (name, chat_id) VALUES (%s, %s)", (message.text, message.chat.id))
    conn.commit()
    cur.close()
    conn.close()
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    await state.clear()

# Add operation
@router.message(Command("add_operation"))
async def add_operation(message: Message, state: FSMContext):
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE chat_id = %s", (message.chat.id,))
    if not cur.fetchone():
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reg.")
        cur.close()
        conn.close()
        return
    cur.close()
    conn.close()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–û–•–û–î", callback_data="INCOME"),
         InlineKeyboardButton(text="–†–ê–°–•–û–î", callback_data="EXPENSE")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=kb)
    await state.set_state(AddOperationState.waiting_for_type)

@router.callback_query(AddOperationState.waiting_for_type)
async def choose_type(callback: CallbackQuery, state: FSMContext):
    await state.update_data(type_operation=callback.data)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏:")
    await state.set_state(AddOperationState.waiting_for_sum)
    await callback.answer()

@router.message(AddOperationState.waiting_for_sum)
async def input_sum(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return
    await state.update_data(sum=amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
    await state.set_state(AddOperationState.waiting_for_date)

@router.message(AddOperationState.waiting_for_date)
async def input_date(message: Message, state: FSMContext):
    try:
        date = datetime.strptime(message.text, "%Y-%m-%d").date()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 2024-12-31")
        return
    user_data = await state.get_data()
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO operations (date, sum, chat_id, type_operation)
        VALUES (%s, %s, %s, %s)
    """, (date, user_data["sum"], message.chat.id, user_data["type_operation"]))
    conn.commit()
    cur.close()
    conn.close()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()

# View operations
@router.message(Command("operations"))
async def view_operations(message: Message, state: FSMContext):
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE chat_id = %s", (message.chat.id,))
    if not cur.fetchone():
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reg.")
        cur.close()
        conn.close()
        return
    cur.close()
    conn.close()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="RUB", callback_data="RUB"),
            InlineKeyboardButton(text="USD", callback_data="USD"),
            InlineKeyboardButton(text="EUR", callback_data="EUR")
        ]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=kb)
    await state.set_state(OperationViewState.waiting_for_currency)

@router.callback_query(OperationViewState.waiting_for_currency)
async def process_currency(callback: CallbackQuery, state: FSMContext):
    await state.update_data(currency=callback.data)
    type_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–í–°–ï", callback_data="ALL"),
            InlineKeyboardButton(text="–î–û–•–û–î–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò", callback_data="INCOME"),
            InlineKeyboardButton(text="–†–ê–°–•–û–î–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò", callback_data="EXPENSE"),
        ]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞:", reply_markup=type_kb)
    await state.set_state(OperationViewState.waiting_for_type_filter)
    await callback.answer()

@router.callback_query(OperationViewState.waiting_for_type_filter)
async def process_operation_filter(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    currency = user_data["currency"]
    op_type = callback.data
    chat_id = callback.message.chat.id

    conn = get_connection()
    cur = conn.cursor()

    if op_type == "ALL":
        cur.execute("""
            SELECT date, sum, type_operation FROM operations
            WHERE chat_id = %s ORDER BY date DESC;
        """, (chat_id,))
    else:
        cur.execute("""
            SELECT date, sum, type_operation FROM operations
            WHERE chat_id = %s AND type_operation = %s ORDER BY date DESC;
        """, (chat_id, op_type))

    operations = cur.fetchall()
    cur.close()
    conn.close()

    if not operations:
        await callback.message.answer("–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É.")
        await state.clear()
        await callback.answer()
        return

    if currency != "RUB":
        try:
            response = requests.get(f"http://localhost:5000/rate?currency={currency}")
            if response.status_code == 200:
                rate = response.json().get("rate")
            else:
                await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {response.json().get('message')}")
                await state.clear()
                await callback.answer()
                return
        except Exception:
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É –∫—É—Ä—Å–∞.")
            await state.clear()
            await callback.answer()
            return
    else:
        rate = 1.0

    msg = f"–û–ø–µ—Ä–∞—Ü–∏–∏ ({op_type if op_type != 'ALL' else '–í–°–ï'}) –≤ –≤–∞–ª—é—Ç–µ {currency}:\n\n"
    for date, amount, typ in operations:
        converted = round(float(amount) / rate, 2)
        msg += f"üìÖ {date}, üí∞ {converted} {currency}, üìå {typ}\n"

    await callback.message.answer(msg)
    await state.clear()
    await callback.answer()

# –ó–∞–ø—É—Å–∫
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
